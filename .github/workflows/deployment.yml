# Builds the rust binaries for the lambda functions cloud-main, cloud-bucket-cleaner and cloud-sine-generator
# The target is cached with a key consisting of the cargo.lock file and the main.rs files of each lambda.
# The binaries are then uploaded as artifacts in order to be used by terraform.

name: Deployment

on: 
  workflow_dispatch:
  push:
    paths:
      - '**.rs'
      - '**.toml'
      - '**.lock'
      - '**.yml'
      - '**.tf'
  
env:
  TF_VAR_TABLE_NAME: cloud-wave-file 
  TF_VAR_GLOBAL_INDEX: cloud-date-time-index
  TF_VAR_REACT_BUCKET: cloud-react-website-bucket
  TF_VAR_BUCKET_NAME: cloud-wave-file-bucket
  TF_VAR_GENERATOR_LAMBDA: cloud-sine-generator
  TF_VAR_CLEANER_LAMBDA: cloud-bucket-cleaner
  TF_VAR_MAIN_LAMBDA: cloud-main
  LAMBDA_ARTIFACT_PATH: lambda-binaries
  FRONTEND_ARTIFACT_PATH: builds
  BIN_NAME: bootstrap.zip
  TF_VAR_FRONTEND_BUILD_SCRIPT: set_env_vars_for_frontend_build.sh

jobs:
  
  test-rust-lambdas:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3
      
      - name: Test Sine Generator Crate
        run: |
          cd sine_generator
          cargo test
          
      - name: Try Cache
        id: cache-test
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-deps-test
        with:
          path: ./target
          key: test-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('**/main.rs') }}
          restore-keys: |
            build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
            build-${{ env.cache-name }}
            
      - name: Test Lambdas
        run: cargo test --release

  build-rust-lambdas:
    runs-on: macos-12
    needs: test-rust-lambdas
    outputs:
      is-cache-hit: ${{ steps.cache-target.output.cache-hit }} # might be useful in the future
    env:
      BIN_PATH: "target/lambda"

    steps:
      - uses: actions/checkout@v3
     
      - name: Install cargo-lambda
        run: |
          brew tap cargo-lambda/cargo-lambda
          brew install cargo-lambda
      
      - name: Try Cache
        id: cache-target
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-deps
        with:
          path: ./target
          key: build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('**/main.rs') }}
          restore-keys: |
            build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
            build-${{ env.cache-name }}
            
      - name: Build Lambdas
        run: cargo lambda build --release --output-format Zip
          
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.LAMBDA_ARTIFACT_PATH }}
          path: |
            ${{ env.BIN_PATH }}/${{ env.TF_VAR_MAIN_LAMBDA }}/${{ env.BIN_NAME }}
            ${{ env.BIN_PATH }}/${{ env.TF_VAR_CLEANER_LAMBDA }}/${{ env.BIN_NAME }}
            ${{ env.BIN_PATH }}/${{ env.TF_VAR_GENERATOR_LAMBDA }}/${{ env.BIN_NAME }}
        
  terraform:
    name: 'Terraform'
    runs-on: macos-12
    environment: production
    needs: build-rust-lambdas
    env:  
      # Sadly, I cannot use envs to declare other envs, so I have to hardcode the paths
      TF_VAR_CLEANER_LAMBDA_BOOTSTRAP: ../lambda-binaries/cloud-bucket-cleaner/bootstrap.zip
      TF_VAR_GENERATOR_LAMBDA_BOOTSTRAP: ../lambda-binaries/cloud-sine-generator/bootstrap.zip
      TF_VAR_MAIN_LAMBDA_BOOTSTRAP: ../lambda-binaries/cloud-main/bootstrap.zip


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3
    - name: Download Artifacts
      uses: actions/download-artifact@v3 
      with:
        name: ${{ env.LAMBDA_ARTIFACT_PATH }}
        path: ${{ env.LAMBDA_ARTIFACT_PATH }}
    
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=infra init 

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      continue-on-error: true   
      run: terraform -chdir=infra fmt -check infra 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=infra plan -input=false  

    - name: Terraform Apply
      run: terraform -chdir=infra apply -auto-approve -input=false
    
    - name: upload-frontend-build-script
      uses: actions/upload-artifact@v3
      with:
          name: ${{ env.FRONTEND_ARTIFACT_PATH }}
          path: |
            ${{ env.FRONTEND_ARTIFACT_PATH }}/${{ env.TF_VAR_FRONTEND_BUILD_SCRIPT }}
        
  build-frontend:
    needs: terraform
    runs-on: macos-12
    
    steps:
    - uses: actions/checkout@v3
    
    - name: setup-node
      uses: actions/setup-node@v3
      with:
        node-version: 16
        
    - name: download-build-script
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.FRONTEND_ARTIFACT_PATH }}
        path: ${{ env.FRONTEND_ARTIFACT_PATH }}

    - name: build
      run: sh ${{ env.FRONTEND_ARTIFACT_PATH }}/${{ env.TF_VAR_FRONTEND_BUILD_SCRIPT }}

    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1
        
    - name: upload to bucket
      run: aws s3 cp cloud_s3_frontend/build  s3://${{ env.TF_VAR_REACT_BUCKET }} --recursive
