# Builds the rust binaries for the lambda functions cloud-main, cloud-bucket-cleaner and cloud-sine-generator
# The target is cached with a key consisting of the cargo.lock file and the main.rs files of each lambda.
# The binaries are then uploaded as artifacts in order to be used by terraform.

name: Rust

on: 
  workflow_dispatch:
#  push:
#    paths:
#      - '**.rs'
#      - '**.toml'
#      - '**.lock'
#      - '**.yml'
  
env:
  TF_VAR_TABLE_NAME: "cloud-wave-file" 
  TF_VAR_GLOBAL_INDEX: "cloud-date-time-index"
  TF_VAR_BUCKET_NAME: "cloud-wave-file-bucket"
  TF_VAR_GENERATOR_LAMBDA: "cloud-sine-generator"
  TF_VAR_CLEANER_LAMBDA: "cloud-bucket-cleaner"
  TF_VAR_MAIN_LAMBDA: "cloud-main"
  ARTIFACT_PATH: "lambda-binaries"
  BIN_NAME: "bootstrap.zip"

jobs:

  checkout-repository:

    runs-on: self-hosted
    steps:
      - name: print event info
        run: echo '${{ toJSON(github.event) }}'
        
      - name: Checkout Repo
        uses: actions/checkout@v3

  build-cache-and-lambda:
    runs-on: self-hosted
    needs: checkout-repository
    outputs:
      is-cache-hit: ${{ steps.cache-target.output.cache-hit }}

    steps:
      - name: Try Cache
        id: cache-target
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-deps
        with:
          path: ./target
          key: build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('**/main.rs') }}
          restore-keys: |
            build-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
            build-${{ env.cache-name }}
      # only rebuild if there was a cache miss
      # - if: ${{ steps.cache-target.output.cache-hit == 'false' }}
      - name: Build Lambdas
        run: cargo lambda build --release --output-format Zip
      
  upload-artifacts:
    
    # only upload artifacts if there was a cache miss
    #if: needs.build-cache-and-lambda.outputs.is-cache-hit == 'false' 
    
    env:
      BIN_PATH: "target/lambda"
      
    needs: build-cache-and-lambda
    runs-on: self-hosted
    
    steps:
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_PATH }}
          path: |
            ${{ env.BIN_PATH }}/${{ env.TF_VAR_MAIN_LAMBDA }}/${{ env.BIN_NAME }}
            ${{ env.BIN_PATH }}/${{ env.TF_VAR_CLEANER_LAMBDA }}/${{ env.BIN_NAME }}
            ${{ env.BIN_PATH }}/${{ env.TF_VAR_GENERATOR_LAMBDA }}/${{ env.BIN_NAME }}
  
  download-artifacts:
    runs-on: self-hosted
    needs: upload-artifacts
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v3 # not specifying which artifact downloads all artifacts
    - name: List directory
      run: |
        ls ${{ env.ARTIFACT_PATH }}/${{ env.TF_VAR_MAIN_LAMBDA }}
        ls ${{ env.ARTIFACT_PATH }}/${{ env.TF_VAR_MAIN_LAMBDA }}
        ls ${{ env.ARTIFACT_PATH }}/${{ env.TF_VAR_MAIN_LAMBDA }}
        
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    environment: production
    needs: download-artifacts
    env:  
      TF_VAR_SECRET_KEY: ${{ secrets.TF_VAR_SECRET_KEY }}
      TF_VAR_ACCESS_KEY: ${{ secrets.TF_VAR_ACCESS_KEY }}


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    
    - name: Set Bootstrap env
      run: |
        export TF_VAR_CLEANER_LAMBDA_BOOTSTRAP=${{ env.ARTIFACT_PATH }}/${{ env.TF_VAR_CLEANER_LAMBDA }}/${{ env.BIN_NAME }}
        export TF_VAR_GENERATOR_LAMBDA_BOOTSTRAP=${{ env.ARTIFACT_PATH }}/${{ env.TF_VAR_GENERATOR }}/${{ env.BIN_NAME }}
        export TF_VAR_MAIN_LAMBDA_BOOTSTRAP=${{ env.ARTIFACT_PATH }}/${{ env.TF_VAR_MAIN_LAMBDA }}/${{ env.BIN_NAME }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: cd infra; terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
#    - name: Terraform Format
#      run: cd infra; terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: cd infra; terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"main"' # && github.event_name == 'push'
      run: cd infra; terraform apply -auto-approve -input=false
